// ---------------------------------------------------------------------------------------------------------------------------------
// __     __      _                 _
// \ \   / /     | |               | |
//  \ \_/ /  __ _| |__   ___   ___ | |
//   \   /  / _` | '_ \ / _ \ / _ \| |
//    | |  | (_| | | | | (_) | (_) |_|
//    |_|   \__,_|_| |_|\___/ \___/(_)
//
// Webmail Script for 3D Mail Effects - http://www.FluidStudios.com/3dme/
//
// Copyright 2001, Fluid Studios, Inc., all rights reserved.
//
// ---------------------------------------------------------------------------------------------------------------------------------
//
// Description:
//
//   The purpose of this script is to completely handle Yahoo! transactions, building a list of emails even if the mailbox has
//   many pages.
//
// History:
//
//   Originally created on 03/03/2001 by Paul Nettle
//   Added usage of convertReservedURI to both entry points (5/10/2001)
//
// Author:
//
//   Paul Nettle (3dme@FluidStudios.com)
//
// Notes:
//
//   I happen to think that 80-column text went out with DOS, so deal with my phat 132-column script! =)
//   ...and I use an 8-character tab
//
// ---------------------------------------------------------------------------------------------------------------------------------

// ---------------------------------------------------------------------------------------------------------------------------------
// __retrieve is always where the script execution begins for email retrieval
// ---------------------------------------------------------------------------------------------------------------------------------

__retrieve:

	// Make the username/password url-safe

	convertReservedURI __user_name
	convertReservedURI __user_pass

	// Go read the inbox

	Call	login

	// Now, go create messages with all those URLs we just gathered

	Call	collect_messages

	// Return from this script, back to 3DME

	Return

// ---------------------------------------------------------------------------------------------------------------------------------
// __delete is always where the script execution begins for deleting emails
// ---------------------------------------------------------------------------------------------------------------------------------

__delete:

	// Make the username/password url-safe

	convertReservedURI __user_name
	convertReservedURI __user_pass

	// Go read the inbox

	Call	login

	// Now, go create messages with all those URLs we just gathered

	Call	find_message_for_delete

	// Return from this script, back to 3DME

	Return

// ---------------------------------------------------------------------------------------------------------------------------------
// Login and gather message URLs from all pages in the Yahoo! inbox
// ---------------------------------------------------------------------------------------------------------------------------------

login:

	// Need this created early on (and only once)

	SetVar	message_url_list

	// Get the Yahoo! main page (with login information)

	OnError	err_connect
	GetHTTP	pageData "http://mail.yahoo.com/"

	// Are we already at the inbox (cookies can do this to us)

	OnError	find_frame_link
	Find	pageData "name=\"wmailmain\""
	Skip	pageData -9999
	Goto	check_for_my_yahoo

find_frame_link:

	// Find the login form...

	OnError	err_login
	Find	pageData "action=\""
	Skip	pageData 8
	Erase	pageData 0 @pageData

	// Copy over the login URL

	SetVar	login_url pageData
	Find	login_url "\""
	Erase	login_url @login_url

	// Strip out everything but the form from pageData

	Erase	pageData 0 @pageData
	Find	pageData "</form"
	Erase	pageData @pageData
	Skip	pageData -999999

	// Keep scanning pageData for hidden form fields until we don't find any more

	OnError	do_login

	SetVar	postData

hidden_loop_top:

	// Find a hidden field

	Find	pageData "type=hidden"

	// Find the name of it

	Find	pageData "name=\""
	Skip	pageData 6
	Erase	pageData 0 @pageData

	// Get the name of the field

	SetVar	temp pageData
	Find	temp "\""
	Erase	temp @temp
	SetVar	postData postData "&" temp "="

	// Find the value of the field

	Find	pageData "value=\""
	Skip	pageData 7
	Erase	pageData 0 @pageData

	// Get the value of the field

	SetVar	temp pageData
	Find	temp "\""
	Erase	temp @temp
	SetVar	login_url login_url temp

	// Next hidden field, please

	Goto	hidden_loop_top

do_login:

	Erase	postData 0 1

	// Add the username/password to the URL

	SetVar	postData postData "&login=" __user_name "&passwd=" __user_pass

	// Now go to the inbox...

	OnError	err_connect
	PostHTTP	pageData login_url postData

	Call	check_for_auth

check_for_my_yahoo:

	// Did we get stuck in "My Yahoo" ?

	OnError	skip_to_mail_frame
	Find	pageData "check email"
	Rfind	pageData "a href=\""
	Skip	pageData 8
	Erase	pageData 0 @pageData
	Find	pageData "\""
	Erase	pageData @pageData
	SetVar	myyahoo_url pageData

	// Get the email frame

	OnError	err_connect
	GetHTTP	pageData myyahoo_url
	Call	check_for_auth

skip_to_mail_frame:

	// We're still not actually at the inbox just yet... but we're getting close!

	OnError	err_login
	Find	pageData "name=\"wmailmain\""
	Find	pageData "src=\""
	Skip	pageData 5
	Erase	pageData 0 @pageData
	Find	pageData "\""
	Erase	pageData @pageData
	SetVar	inframe_url pageData

	// Get the frame with our inbox link

	OnError	err_connect
	GetHTTP	pageData inframe_url
	Call	check_for_auth

find_inbox_link:

	// Find the inbox link

	OnError	err_login
	Find	pageData ">go to inbox<"
	RFind	pageData "<a href=\""
	Skip	pageData 9
	Erase	pageData 0 @pageData
	Find	pageData "\""
	Erase	pageData @pageData
	SetVar	inbox_url pageData

	// Load up the actual inbox!

	OnError	err_connect
	GetHTTP	pageData inbox_url
	Call	check_for_auth

login_done:

	// Done

	Return

// ---------------------------------------------------------------------------------------------------------------------------------
// Go read the messages in the current page (and read multiple pages if necessary)
// ---------------------------------------------------------------------------------------------------------------------------------

collect_messages:

	// Clear these

	SetVar	msgid
	SetVar	field_from
	SetVar	field_to
	SetVar	field_subj
	SetVar	field_date
	SetVar	body
	SetVar	attach

	// Find the first checkbox

	OnError	collect_messages_next_page
	Find	pageData "type=checkbox"
	Erase	pageData 0 @pageData

	// The from field has this extra table data in there... skip it

	Find	pageData "<td"
	Find	pageData ">"
	Skip	pageData 1
	Erase	pageData 0 @pageData
	
	// The from field
	
	Find	pageData "<td"
	Find	pageData ">"
	Skip	pageData 1
	Erase	pageData 0 @pageData
	SetVar	field_from pageData
	Find	field_from "</td>"
	Erase	field_from @field_from
	Strip	field_from
	RemTags	field_from
	UnHTML	field_from
	
	// The date field

	Find	pageData "<td"
	Find	pageData ">"
	Skip	pageData 1
	Erase	pageData 0 @pageData
	SetVar	field_date pageData
	Find	field_date "</td>"
	Erase	field_date @field_date
	Strip	field_date
	RemTags	field_date
	UnHTML	field_date

	// The size field (unused, except for detecting attachments)

	Find	pageData "<td"
	Find	pageData ">"
	Find	pageData "<td"
	Find	pageData ">"
	Skip	pageData 1
	Erase	pageData 0 @pageData
	SetVar	size pageData
	Find	size "</td>"
	Erase	size @size

	// Is there an attachment (i.e. a link within the size field)

	OnError	no_attach
	Skip	size -99999
	Find	size "a href"
	SetVar	attach "1"

no_attach:
	OnError	collect_messages_next_page

	// The subject field

	Find	pageData "<td"
	Find	pageData ">"
	Skip	pageData 1
	Erase	pageData 0 @pageData
	SetVar	field_subj pageData
	Find	field_subj "</td>"
	Erase	field_subj @field_subj

	// The message URL (found in the subject)

	SetVar	message_url field_subj
	Find	message_url "a href=\""
	Skip	message_url 8
	Erase	message_url 0 @message_url
	Find	message_url "\""
	Erase	message_url @message_url

	// The message ID (found in the message's URL)

	SetVar	msgid message_url
	Find	msgid "msgid="
	Skip	msgid 6
	Erase	msgid 0 @msgid
	Find	msgid "&"
	Erase	msgid @msgid

	// Finally, finish off the subject

	Skip	field_subj -99999
	Find	field_subj "\">"
	Skip	field_subj 2
	Erase	field_subj 0 @field_subj
	Find	field_subj "</a>"
	Erase	field_subj @field_subj
	Strip	field_subj
	RemTags	field_subj
	UnHTML	field_subj

	// Do we need to bother visiting this URL?

	OnError	read_message
	SetVar	body
	Find	__msgid_list "[$]" msgid "[$]"

	// Our message ID was in the list, don't bother reading it again

	Goto	collect_messages_next

read_message:

	// Go read the body of this email

	Call	do_read_message

collect_messages_next:

	// Add this email

	AddMail	msgid field_from field_to field_subj field_date body attach

	// Next message, please

	Goto	collect_messages

collect_messages_next_page:

	// Is there a 'next' link?

	OnError	collect_messages_done
	Find	pageData ">Next<"

	// Yes, strip out the URL

	RFind	pageData "<a href=\""
	Skip	pageData 9
	Erase	pageData 0 @pageData
	Find	pageData "\""
	Erase	pageData @pageData
	SetVar	page_url pageData

	// Get the next page

	OnError	err_connect
	GetHTTP	pageData page_url
	Call	check_for_auth

	// Keep collecting messages

	Goto	collect_messages

collect_messages_done:

	// Done
	
	Return

// ---------------------------------------------------------------------------------------------------------------------------------
// Go read a message from the variable message_url
// ---------------------------------------------------------------------------------------------------------------------------------

do_read_message:

	// Load up the actual message

	OnError	err_connect
	GetHTTP	messagePageData message_url
	Call	check_for_auth

	// The header information in the message page is more descriptive, we'll use that if we can find it

check_for_date:
	OnError	check_for_to
	Find	messagePageData "date:</b>"
	Find	messagePageData "</td><td>"
	Skip	messagePageData 9
	SetVar	field_date messagePageData
	Erase	field_date 0 @messagePageData
	Skip	messagePageData -999999
	Find	field_date "</td>"
	Erase	field_date @field_date
	Strip	field_date
	RemTags	field_date
	UnHTML	field_date

check_for_to:
	OnError	check_for_from
	Find	messagePageData "to:</b>"
	Find	messagePageData "</td><td>"
	Skip	messagePageData 9
	SetVar	field_to messagePageData
	Erase	field_to 0 @messagePageData
	Skip	messagePageData -999999
	Find	field_to "</td>"
	Erase	field_to @field_to
	Strip	field_to
	RemTags	field_to
	UnHTML	field_to

check_for_from:
	OnError	check_for_subj
	Find	messagePageData "from:</b>"
	Find	messagePageData "</td><td>"
	Skip	messagePageData 9
	SetVar	field_from messagePageData
	Erase	field_from 0 @messagePageData
	Skip	messagePageData -999999
	Find	field_from "</td>"
	Erase	field_from @field_from
	Strip	field_from
	RemTags	field_from
	UnHTML	field_from

	// Some of Yahoo!'s 'from' fields can have address book options following the field... so we'll strip them off here

	Find	field_from "|"
	Erase	field_from @field_from

check_for_subj:
	OnError	find_body
	Find	messagePageData "subject:</b>"
	Find	messagePageData "</td><td>"
	Skip	messagePageData 9
	Erase	messagePageData 0 @messagePageData
	SetVar	field_subj messagePageData
	Find	field_subj "</td>"
	Erase	field_subj @field_subj
	Strip	field_subj
	RemTags	field_subj
	UnHTML	field_subj

find_body:
	OnError	no_body
	Find	messagePageData "</table>"
	Skip	messagePageData 1
	Find	messagePageData "</table>"
	Skip	messagePageData 1
	Find	messagePageData "</table>"
	Skip	messagePageData	8
	Erase	messagePageData 0 @messagePageData
	Find	messagePageData msgid
	RFind	messagePageData "<table"
	Erase	messagePageData @messagePageData
	SetVar	body messagePageData
	Strip	body

no_body:
	// Done!

	Return

// ---------------------------------------------------------------------------------------------------------------------------------
// Go find the messages in the current page (and read multiple pages if necessary)
// ---------------------------------------------------------------------------------------------------------------------------------

find_message_for_delete:

	// Find the first checkbox

	OnError	find_message_for_delete_next_page
	Find	pageData "type=checkbox"
	Erase	pageData 0 @pageData

	// From field has extra TD in there... skip it
	
	Find	pageData "<td"
	Find	pageData ">"
	Skip	pageData 1
	
	// The from field

	Find	pageData "<td"
	Find	pageData ">"
	Skip	pageData 1

	// The date field

	Find	pageData "<td"
	Find	pageData ">"
	Skip	pageData 1

	// The size field (unused, except for detecting attachments)

	Find	pageData "<td"
	Find	pageData ">"
	Find	pageData "<td"
	Find	pageData ">"
	Skip	pageData 1

	// The subject field

	Find	pageData "<td"
	Find	pageData ">"
	Skip	pageData 1
	Erase	pageData 0 @pageData
	SetVar	field_subj pageData
	Find	field_subj "</td>"
	Erase	field_subj @field_subj

	// The message URL (found in the subject)

	SetVar	message_url field_subj
	Find	message_url "a href=\""
	Skip	message_url 8
	Erase	message_url 0 @message_url
	Find	message_url "\""
	Erase	message_url @message_url
	Skip	message_url -99999

	// Is this the one we're supposed to delete?

	OnError	find_message_for_delete
	Find	message_url "MsgId=" __delete_me "&"
	
	// We found it

	Call	do_delete_message

	// We're done

	Return

find_message_for_delete_next_page:

	// Is there a 'next' link?

	OnError	find_message_for_delete_not_found
	Find	pageData ">Next<"

	// Yes, strip out the URL

	RFind	pageData "<a href=\""
	Skip	pageData 9
	Erase	pageData 0 @pageData
	Find	pageData "\""
	Erase	pageData @pageData
	SetVar	page_url pageData

	// Get the next page

	OnError	err_connect
	GetHTTP	pageData page_url
	Call	check_for_auth

	// Keep collecting messages

	Goto	find_message_for_delete

find_message_for_delete_not_found:

	// We never found it!

	Error	"Unable to delete, message not found"

// ---------------------------------------------------------------------------------------------------------------------------------
// Go read a message from the variable message_url, then find its delete link, and follow that
// ---------------------------------------------------------------------------------------------------------------------------------

do_delete_message:

	// Load up the message

	OnError	err_connect
	GetHTTP	messagePageData message_url
	Call	check_for_auth

	// Find the delete button in the form

	OnError	err_delete
	Find	messagePageData "name=DEL"
	RFind	messagePageData "action=\""
	Skip	messagePageData 8
	Erase	messagePageData 0 @messagePageData
	Find	messagePageData "\""
	SetVar	crumb messagePageData
	Erase	messagePageData @messagePageData
	SetVar	delete_url messagePageData

	// Add the necessary stuff to the delete_url

	SetVar	delete_url delete_url "&DEL=Delete&MsgId=" __delete_me "&box=Inbox&MOV=&NewFol="

	// Yahoo has this '.crumb' thing... look for it
	
	OnError	no_crumb
	Find	crumb ".crumb"
	Find	crumb "value=\""
	Skip	crumb 7
	Erase	crumb 0 @crumb
	Find	crumb "\""
	Erase	crumb @crumb
	SetVar	delete_url delete_url "&.crumb=" crumb

no_crumb:
	// Simply reading this page will delete the message

	GetHTTP	messagePageData delete_url
	Call	check_for_auth

	// Okay, the message should be deleted

	Return

// ---------------------------------------------------------------------------------------------------------------------------------
// Make sure they're not asking for our password
// ---------------------------------------------------------------------------------------------------------------------------------

check_for_auth:

	OnError	auth_ok
	Find	pageData "Verify Your Yahoo! Password"
	Goto	err_pass

auth_ok:
	Return

// ---------------------------------------------------------------------------------------------------------------------------------
// Errors
// ---------------------------------------------------------------------------------------------------------------------------------

err_connect:
	Error	"Unable to connect to Yahoo!"

err_delete:
	Error	"Error trying to delete email"

err_login:
	Error	"Error trying to login to Yahoo!"

err_message:
	Error	"Error trying to read message!"

err_pass:
	Error	"Verify your login/password!"

// ---------------------------------------------------------------------------------------------------------------------------------
// End
// ---------------------------------------------------------------------------------------------------------------------------------



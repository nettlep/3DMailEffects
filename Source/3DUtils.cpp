// ---------------------------------------------------------------------------------------------------------------------------------
//  ____  _____  _    _ _   _ _                          
// |___ \|  __ \| |  | | | (_) |                         
//   __) | |  | | |  | | |_ _| |___      ___ _ __  _ __  
//  |__ <| |  | | |  | | __| | / __|    / __| '_ \| '_ \ 
//  ___) | |__| | |__| | |_| | \__ \ _ | (__| |_) | |_) |
// |____/|_____/ \____/ \__|_|_|___/(_) \___| .__/| .__/ 
//                                          | |   | |    
//                                          |_|   |_|    
//
// Utilitarian funcitons useful for 3D graphics
//
// Best viewed with 8-character tabs and (at least) 132 columns
//
// ---------------------------------------------------------------------------------------------------------------------------------
//
// Originally released under a custom license.
// This historical re-release is provided under the MIT License.
// See the LICENSE file in the repo root for details.
//
// https://github.com/nettlep
//
// ---------------------------------------------------------------------------------------------------------------------------------
// Originally created on 12/20/2000 by Paul Nettle
//
// Copyright 2000, Fluid Studios, Inc., all rights reserved.
// ---------------------------------------------------------------------------------------------------------------------------------

#include "stdafx.h"
#include "3Dme.h"
#include "3DUtils.h"

// ---------------------------------------------------------------------------------------------------------------------------------

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// ---------------------------------------------------------------------------------------------------------------------------------
// Returns a random number between 0...1
// ---------------------------------------------------------------------------------------------------------------------------------

float	frand()
{
	return (float) rand() / (float) RAND_MAX;
}

// ---------------------------------------------------------------------------------------------------------------------------------
// Returns the closest point on the line-segment, and sets the 'edge' flag if the point is not one of the endpoints
// ---------------------------------------------------------------------------------------------------------------------------------

point3	closestPointOnLine(const point3 &a, const point3 &b, const point3 &p, bool &edge)
{
	vector3 c = p - a;
	vector3 v = b - a;
	v.normalize();

	edge = false;
	float	t = v ^ c;
	if (t < 0) return a;

	float	d = b.distance(a);
	if (t > d) return b;

	edge = true;
	return a + v * t;
}

// ---------------------------------------------------------------------------------------------------------------------------------
// 3DUtils.cpp - End of file
// ---------------------------------------------------------------------------------------------------------------------------------


// ---------------------------------------------------------------------------------------------------------------------------------
//  _____             __ _      _   __  __                                  
// |  __ \           / _| |    | | |  \/  |                                 
// | |__) |_ __  ___| |_| | ___| |_| \  / | __ _ _ __       ___ _ __  _ __  
// |  ___/| '__|/ _ \  _| |/ _ \ __| |\/| |/ _` | '_ \     / __| '_ \| '_ \ 
// | |    | |  |  __/ | | |  __/ |_| |  | | (_| | |_) | _ | (__| |_) | |_) |
// |_|    |_|   \___|_| |_|\___|\__|_|  |_|\__,_| .__/ (_) \___| .__/| .__/ 
//                                              | |            | |   | |    
//                                              |_|            |_|   |_|    
//
//   Preflet map
//
// ---------------------------------------------------------------------------------------------------------------------------------
// Originally created on 09/06/2003 by Paul Nettle
//
// Originally released under a custom license.
// This historical re-release is provided under the MIT License.
// See the LICENSE file in the repo root for details.
//
// https://github.com/nettlep
//
// Copyright 2003, Fluid Studios, all rights reserved.
// ---------------------------------------------------------------------------------------------------------------------------------

#include "stdafx.h"
#include "3dme.h"
#include "PrefletMap.h"

// ---------------------------------------------------------------------------------------------------------------------------------

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// ---------------------------------------------------------------------------------------------------------------------------------

void	PrefletMap::apply()
{
	// Save all results for all preflets

	for (iterator i = begin(); i != end(); ++i)
	{
		i->second->apply();
	}
}

// ---------------------------------------------------------------------------------------------------------------------------------

void	PrefletMap::showPreflet(const HTREEITEM item, const bool show)
{
	for (iterator i = begin(); i != end(); ++i)
	{
		if (i->second->item() == item)
		{
			i->second->ShowWindow(show ? SW_SHOW:SW_HIDE);
			break;
		}
	}
}

// ---------------------------------------------------------------------------------------------------------------------------------
// PrefletMap.cpp - End of file
// ---------------------------------------------------------------------------------------------------------------------------------
